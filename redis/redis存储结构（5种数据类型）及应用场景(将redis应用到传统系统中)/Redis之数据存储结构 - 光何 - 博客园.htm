<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0046)https://www.cnblogs.com/guanghe/p/9122684.html -->
<!DOCTYPE html><HTML lang="zh-cn"><HEAD><META content="IE=9.0000" 
http-equiv="X-UA-Compatible">

<META charset="utf-8">
<META name="viewport" content="width=device-width, initial-scale=1">
<META name="referrer" content="origin"><TITLE>Redis之数据存储结构 - 光何 - 博客园</TITLE>
<META content="今天去中关村软件园面试，被问到：你做项目用到的Redis处理数据用的什么结构？顿时石化，”用到的结构，不就是key-value嘛，还有什么结构？“。面试官说：“平时除了工作，要加强学习，下面的面试我觉" 
property="og:description"><LINK rel="stylesheet" type="text/css" href="Redis之数据存储结构%20-%20光何%20-%20博客园_files/blog-common.css">
<LINK rel="stylesheet" type="text/css" href="Redis之数据存储结构%20-%20光何%20-%20博客园_files/284960.css">
<LINK id="mobile-style" rel="stylesheet" type="text/css" href="Redis之数据存储结构%20-%20光何%20-%20博客园_files/bundle-LessIsMore-mobile.css" 
media="only screen and (max-width: 767px)"><LINK title="RSS" rel="alternate" 
type="application/rss+xml" href="https://www.cnblogs.com/guanghe/rss"><LINK 
title="RSD" rel="EditURI" type="application/rsd+xml" href="https://www.cnblogs.com/guanghe/rsd.xml">
<LINK rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.cnblogs.com/guanghe/wlwmanifest.xml">
<SCRIPT src="Redis之数据存储结构%20-%20光何%20-%20博客园_files/jquery-2.2.0.min.js"></SCRIPT>

<SCRIPT>var currentBlogId=284960;var currentBlogApp='guanghe',cb_enable_mathjax=false;var isLogined=false;</SCRIPT>

<SCRIPT type="text/javascript" src="Redis之数据存储结构%20-%20光何%20-%20博客园_files/blog-common.js"></SCRIPT>

<META name="GENERATOR" content="MSHTML 9.00.8112.16553"></HEAD>
<BODY><A name="top"></A>
<DIV id="home">
<DIV id="header">
<DIV id="blogTitle"><!--done-->
<DIV class="title"><A id="Header1_HeaderTitle" class="headermaintitle" href="https://www.cnblogs.com/guanghe/">光何</A></DIV>
<DIV class="subtitle">岁月静好，不忘初心</DIV></DIV><!--end: blogTitle 博客的标题和副标题 -->
<DIV id="navigator">
<UL id="navList">
  <LI id="nav_sitehome"></LI>
  <LI id="nav_myhome"><A id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/guanghe/">首页</A></LI>
  <LI id="nav_newpost"><A id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" 
  rel="nofollow">新随笔</A></LI>
  <LI id="nav_contact"><A id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%85%89%E4%BD%95" 
  rel="nofollow">联系</A></LI>
  <LI id="nav_rss"><!----></LI>
  <LI id="nav_admin"><A id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/" 
  rel="nofollow">管理</A></LI></UL>
<DIV class="blogStats"></DIV><!--end: blogStats --></DIV><!--end: navigator 博客导航栏 -->
</DIV><!--end: header 头部 -->
<DIV id="main">
<DIV id="mainContent">
<DIV class="forFlow">
<DIV id="post_detail"><!--done-->
<DIV id="topics">
<DIV class="post">
<H1 class="postTitle"><A id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/guanghe/p/9122684.html">Redis之数据存储结构</A></H1>
<DIV class="clear"></DIV>
<DIV class="postBody">
<DIV id="cnblogs_post_body" class="blogpost-body">
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">今天去中关村软件园面试，被问到：你做项目用到的Redis处理数据用的什么结构？顿时石化，”用到的结构，不就是key-value嘛，还有什么结构？“。面试官说：“平时除了工作，要加强学习，下面的面试我觉得没有了。”，之后......</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">后来一想，面试官说的结构是不是指数据类型？他管数据类型叫结构，看来文字游戏害死人啊。</SPAN></P>
<H2><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">一、Redis和Memcache区别</SPAN></H2>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;"><STRONG>我们先来看一下redis的一个定义，来自官方的：</STRONG></SPAN></P>
<DIV class="cnblogs_code"><PRE><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">1 Redis is an open source, BSD licensed, advanced key-value store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets and sorted sets.
2 redis是开源,BSD许可,高级的key-value存储系统. 
3 可以用来存储字符串,哈希结构,链表,集合,因此,常用来提供数据结构服务.</SPAN></PRE>
</DIV>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;"><STRONG>那Redis和MC相比，独特之处是什么：</STRONG></SPAN></P>
<DIV class="cnblogs_code"><PRE><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">1 1: redis可以用来做存储(storge), 而memccached是用来做缓存(cache)
2   这个特点主要因为其有”持久化”的功能.
3 
4 2: 存储的数据有”结构”,对于memcached来说,存储的数据,只有1种类型--”字符串”,而redis则可以存储字符串,链表,哈希结构,集合,有序集合</SPAN></PRE>
</DIV>
<UL>
  <LI><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">性能方面：没有必要过多的关心性能，因为二者的性能都已经足够高了。由于Redis只使用单核，而Memcached可以使用多核，所以在比较上，平均每一个核上Redis在存储小数据时比Memcached性能更高。而在100k以上的数据中，Memcached性能要高于Redis，虽然Redis最近也在存储大数据的性能上进行优化，但是比起Memcached，还是稍有逊色。说了这么多，结论是，无论你使用哪一个，每秒处理请求的次数都不会成为瓶颈。（比如瓶颈可能会在网卡）</SPAN></LI>
  <LI><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">内存使用效率：使用简单的key-value存储的话，Memcached的内存利用率更高，而如果Redis采用hash结构来做key-value存储，由于其组合式的压缩，其内存利用率会高于Memcached。当然，这和你的应用场景和数据特性有关。</SPAN></LI>
</UL>
<UL>
  <LI><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">数据持久化：如果你对数据持久化和数据同步有所要求，那么推荐你选择Redis，因为这两个特性Memcached都不具备。即使你只是希望在升级或者重启系统后缓存数据不会丢失，选择Redis也是明智的。</SPAN></LI>
</UL>
<UL>
  <LI><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">数据结构:当然，最后还得说到你的具体应用需求。Redis相比Memcached来说，拥有更多的数据结构和并支持更丰富的数据操作，通常在Memcached里，你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。在Redis中，这些复杂的操作通常和一般的GET/SET一样高效。所以，如果你需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。</SPAN></LI>
  <LI>
  <P><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">网络IO模型方面：Memcached是多线程，分为监听线程、worker线程，引入锁，带来了性能损耗。Redis使用单线程的IO复用模型，将速度优势发挥到最大，也提供了较简单的计算功能&nbsp;</SPAN></P>
  </LI>
  <LI>
  <P><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">内存管理方面：Memcached使用预分配的内存池的方式，带来一定程度的空间浪费 
  并且在内存仍然有很大空间时，新的数据也可能会被剔除，而Redis使用现场申请内存的方式来存储数据，不会剔除任何非临时数据 
  Redis更适合作为存储而不是cache&nbsp;</SPAN></P></LI>
  <LI>
  <P><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">数据的一致性方面：Memcached提供了cas命令来保证.而Redis提供了事务的功能，可以保证一串 
  命令的原子性，中间不会被任何操作打断&nbsp;</SPAN></P></LI></UL>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;"><STRONG>&nbsp;如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp;1 
、Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp;2 、Redis支持数据的备份，即master-slave模式的数据备份。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp;3 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp;4、Redis可以实现主从复制，实现故障恢复。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp;5、Redis的Sharding技术： 很容易将数据分布到多个Redis实例中</SPAN></P>
<H2><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;"><STRONG>二、Redis数据类型</STRONG></SPAN></H2>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;"><STRONG>String,Hash,Set,List,SortedSet,pub/sub,Transaction</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp;&nbsp;首先Redis内部使用一个redisObject对象来表示所有的key和value,redisObject最主要信息：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp;type代表一个value对象具体是何种数据类型，</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp;encoding是不同数据类型在redis内部的存储方式，</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
&nbsp;比如：type=string代表value存储的是一个普通字符串，那么对应的encoding可以是raw或者是int,如果是int则代表实际redis内部是按数值型类存储和表示这个字符串的，当然前提是这个字符串本身可以用数值表示，比如:"123" 
"456"这样的字符串。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
&nbsp;这里需要特殊说明一下vm字段，只有打开了Redis的虚拟内存功能，此字段才会真正的分配内存，该功能默认是关闭状态的，该功能会在后面具体描述。通过上图我们可以发现Redis使用redisObject来表示所有的key/value数据是比较浪费内存的，当然这些内存管理成本的付出主要也是为了给Redis不同数据类型提供一个统一的管理接口，实际作者也提供了多种方法帮助我们尽量节省内存使用，我们随后会具体讨论。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　<STRONG>String:</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;"><STRONG>　　</STRONG>Strings 
数据结构是简单的key-value类型，value其实不仅是String，也可以是数字.</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　常用命令: 
&nbsp;set,get,decr,incr,mget 等。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　应用场景：String是最常用的一种数据类型，普通的key/ 
value 存储都可以归为此类.即可以完全实现目前 Memcached 的功能，并且效率更高。还可以享受Redis的定时持久化，操作日志及 
Replication等功能。除了提供与 Memcached 一样的get、set、incr、decr 
等操作外，Redis还提供了下面一些操作：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　获取字符串长度</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　往字符串append内容</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　设置和获取字符串的某一段内容</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　设置及获取字符串的某一位（bit）</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　批量设置一系列字符串的内容</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　实现方式：String在redis内部存储默认就是一个字符串，被redisObject所引用，当遇到incr,decr等操作时会转成数值型进行计算，此时redisObject的encoding字段为int。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;"><STRONG>　　Hash：</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　常用命令：hget,hset,hgetall 
等。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　应用场景：在Memcached中，我们经常将一些结构化的信息打包成HashMap，在客户端序列化后存储为一个字符串的值，比如用户的昵称、年龄、性别、积分等，这时候在需要修改其中某一项时，通常需要将所有值取出反序列化后，修改某一项的值，再序列化存储回去。这样不仅增大了开销，也不适用于一些可能并发操作的场合（比如两个并发的操作都需要修改积分）。而Redis的Hash结构可以使你像在数据库中Update一个属性一样只修改某一项属性值。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 我们简单举个实例来描述下Hash的应用场景，比如我们要存储一个用户信息对象数据，包含以下信息：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储，主要有以下2种存储方式：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　<IMG alt="" 
src="Redis之数据存储结构%20-%20光何%20-%20博客园_files/955092-20180601170611943-1256095798.jpg"></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　第一种方式将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，这种方式的缺点是，增加了序列化/反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入CAS等复杂问题。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　<IMG alt="" 
src="Redis之数据存储结构%20-%20光何%20-%20博客园_files/955092-20180601170719916-764545512.jpg"></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　第二种方法是这个用户信息对象有多少成员就存成多少个key-value对儿，用用户ID+对应属性的名称作为唯一标识来取得对应属性的值，虽然省去了序列化开销和并发问题，但是用户ID为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　那么Redis提供的Hash很好的解决了这个问题，Redis的Hash实际是内部存储的Value为一个HashMap，并提供了直接存取这个Map成员的接口，如下图：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　<IMG alt="" 
src="Redis之数据存储结构%20-%20光何%20-%20博客园_files/955092-20180601170837235-127169804.jpg"></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　也就是说，Key仍然是用户ID, 
value是一个Map，这个Map的key是成员的属性名，value是属性值，这样对数据的修改和存取都可以直接通过其内部Map的Key(Redis里称内部Map的key为field), 
也就是通过 key(用户ID) + field(属性标签) 
就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题。很好的解决了问题。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　这里同时需要注意，Redis提供了接口(hgetall)可以直接取到全部的属性数据,但是如果内部Map的成员很多，那么涉及到遍历整个内部Map的操作，由于Redis单线程模型的缘故，这个遍历操作可能会比较耗时，而另其它客户端的请求完全不响应，这点需要格外注意。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">实现方式：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　上面已经说到Redis 
Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value 
redisObject的encoding为zipmap,当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;"><STRONG>　　List</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　常用命令：lpush,rpush,lpop,rpop,lrange等。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　应用场景：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　Redis 
list的应用场景非常多，也是Redis最重要的数据结构之一，比如twitter的关注列表，粉丝列表等都可以用Redis的list结构来实现。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　Lists 
就是链表，相信略有数据结构知识的人都应该能理解其结构。使用Lists结构，我们可以轻松地实现最新消息排行等功能。Lists的另一个应用就是消息队列，</SPAN><BR><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作Lists中某一段的api，你可以直接查询，删除Lists中某一段的元素。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">实现方式：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　Redis 
list的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销，Redis内部的很多实现，包括发送缓冲队列等也都是用的这个数据结构。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　<STRONG>Set</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　常用命令：sadd,spop,smembers,sunion 
等。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　应用场景：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　Redis 
set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　Sets 
集合的概念就是一堆不重复值的组合。利用Redis提供的Sets数据结构，可以存储一些集合性的数据，比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　实现方式：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　set 
的内部实现是一个 
value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　<STRONG>　Sorted 
Set</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　常用命令：zadd,zrange,zrem,zcard等</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　使用场景：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　Redis 
sorted set的使用场景与set类似，区别是set不是自动有序的，而sorted 
set可以通过用户额外提供一个优先级(score)的参数来为成员排序，并且是插入有序的，即自动排序。当你需要一个有序的并且不重复的集合列表，那么可以选择sorted 
set数据结构，比如twitter 的public timeline可以以发表时间作为score来存储，这样获取时就是自动按时间排好序的。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　另外还可以用Sorted 
Sets来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　实现方式：</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　Redis 
sorted 
set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score,使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　<STRONG>Pub/Sub</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　Pub/Sub 
从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　<STRONG>Transactions</STRONG></SPAN></P>
<P><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　谁说NoSQL都不支持事务，虽然Redis的Transactions提供的并不是严格的ACID的事务（比如一串用EXEC提交执行的命令，在执行中服务器宕机，那么会有一部分命令执行了，剩下的没执行），但是这个Transactions还是提供了基本的命令打包执行的功能（在服务器不出问题的情况下，可以保证一连串的命令是顺序在一起执行的，中间有会有其它客户端命令插进来执行）。Redis还提供了一个Watch功能，你可以对一个key进行Watch，然后再执行Transactions，在这过程中，如果这个Watched的值进行了修改，那么这个Transactions会发现并拒绝执行。</SPAN></P>
<H2><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">三、Redis应用场景</SPAN></H2>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp;　　Redis在很多方面与其他数据库解决方案不同：它使用内存提供主存储支持，而仅使用硬盘做持久性的存储；它的数据模型非常独特，用的是单线程。另一个大区别在于，你可以在开发环境中使用Redis的功能，但却不需要转到Redis。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　转向Redis当然也是可取的，许多开发者从一开始就把Redis作为首选数据库；但设想如果你的开发环境已经搭建好，应用已经在上面运行了，那么更换数据库框架显然不那么容易。另外在一些需要大容量数据集的应用，Redis也并不适合，因为它的数据集不会超过系统可用的内存。所以如果你有大数据应用，而且主要是读取访问模式，那么Redis并不是正确的选择。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
然而我喜欢Redis的一点就是你可以把它融入到你的系统中来，这就能够解决很多问题，比如那些你现有的数据库处理起来感到缓慢的任务。这些你就可以通过Redis来进行优化，或者为应用创建些新的功能。在本文中，我就想探讨一些怎样将Redis加入到现有的环境中，并利用它的原语命令等功能来解决 
传统环境中碰到的一些常见问题。在这些例子中，Redis都不是作为首选数据库。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">1、显示最新的项目列表</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">下面这个语句常用来显示最新项目，随着数据多了，查询毫无疑问会越来越慢。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　<SPAN 
class="keyword">SELECT&nbsp;*&nbsp;<SPAN 
class="keyword">FROM&nbsp;foo&nbsp;<SPAN 
class="keyword">WHERE&nbsp;...&nbsp;<SPAN class="keyword">ORDER&nbsp;<SPAN 
class="keyword">BY&nbsp;<SPAN class="keyword">time&nbsp;<SPAN 
class="keyword">DESC&nbsp;LIMIT&nbsp;10 
&nbsp;&nbsp;</SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
在Web应用中，“列出最新的回复”之类的查询非常普遍，这通常会带来可扩展性问题。这令人沮丧，因为项目本来就是按这个顺序被创建的，但要输出这个顺序却不得不进行排序操作。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
类似的问题就可以用Redis来解决。比如说，我们的一个Web应用想要列出用户贴出的最新20条评论。在最新的评论边上我们有一个“显示全部”的链接，点击后就可以获得更多的评论。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 我们假设数据库中的每条评论都有一个唯一的递增的ID字段。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
我们可以使用分页来制作主页和评论页，使用Redis的模板，每次新评论发表时，我们会将它的ID添加到一个Redis列表：</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">　　LPUSH&nbsp;latest.comments&nbsp;&lt;ID&gt; 
&nbsp;&nbsp;</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;我们将列表裁剪为指定长度，因此Redis只需要保存最新的5000条评论：</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;LTRIM&nbsp;latest.comments&nbsp;0&nbsp;5000&nbsp;</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 每次我们需要获取最新评论的项目范围时，我们调用一个函数来完成（使用伪代码）：&nbsp;</SPAN></P>
<DIV class="dp-highlighter bg_plain">
<OL start="1">
  <LI class="alt"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">FUNCTION&nbsp;get_latest_comments(start,&nbsp;num_items):&nbsp;&nbsp;</SPAN></LI>
  <LI><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;id_list&nbsp;=&nbsp;redis.lrange("latest.comments",start,start+num_items&nbsp;-&nbsp;1)&nbsp;&nbsp;</SPAN></LI>
  <LI class="alt"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;IF&nbsp;id_list.length&nbsp;&lt;&nbsp;num_items&nbsp;&nbsp;</SPAN></LI>
  <LI><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id_list&nbsp;=&nbsp;SQL_DB("SELECT&nbsp;...&nbsp;ORDER&nbsp;BY&nbsp;time&nbsp;LIMIT&nbsp;...")&nbsp;&nbsp;</SPAN></LI>
  <LI class="alt"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;END&nbsp;&nbsp;</SPAN></LI>
  <LI><SPAN 
  style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;RETURN&nbsp;id_list&nbsp;&nbsp;</SPAN></LI>
  <LI class="alt"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">END&nbsp;</SPAN></LI></OL></DIV>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
这里我们做的很简单。在Redis中我们的最新ID使用了常驻缓存，这是一直更新的。但是我们做了限制不能超过5000个ID，因此我们的获取ID函数会一直询问Redis。只有在start/count参数超出了这个范围的时候，才需要去访问数据库。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
我们的系统不会像传统方式那样“刷新”缓存，Redis实例中的信息永远是一致的。SQL数据库（或是硬盘上的其他类型数据库）只是在用户需要获取“很远”的数据时才会被触发，而主页或第一个评论页是不会麻烦到硬盘上的数据库了。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">2、删除与过滤</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
我们可以使用LREM来删除评论。如果删除操作非常少，另一个选择是直接跳过评论条目的入口，报告说该评论已经不存在。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
&nbsp;有些时候你想要给不同的列表附加上不同的过滤器。如果过滤器的数量受到限制，你可以简单的为每个不同的过滤器使用不同的Redis列表。毕竟每个列表只有5000条项目，但Redis却能够使用非常少的内存来处理几百万条项目。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">3、排行榜相关</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
另一个很普遍的需求是各种数据库的数据并非存储在内存中，因此在按得分排序以及实时更新这些几乎每秒钟都需要更新的功能上数据库的性能不够理想。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 典型的比如那些在线游戏的排行榜，比如一个Facebook的游戏，根据得分你通常想要：</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp;- 列出前100名高分选手</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp;- 列出某用户当前的全球排名</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 这些操作对于Redis来说小菜一碟，即使你有几百万个用户，每分钟都会有几百万个新的得分。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 模式是这样的，每次获得新得分时，我们用这样的代码：</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; ZADD&nbsp;leaderboard &nbsp;&lt;score&gt; 
&nbsp;&lt;username&gt;&nbsp;</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp;你可能用userID来取代username，这取决于你是怎么设计的。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 得到前100名高分用户很简单：ZREVRANGE leaderboard 0 99。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 用户的全球排名也相似，只需要：ZRANK leaderboard &lt;username&gt;。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">4、按照用户投票和时间排序</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 排行榜的一种常见变体模式就像Reddit或Hacker 
News用的那样，新闻按照类似下面的公式根据得分来排序：</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
&nbsp;score&nbsp;=&nbsp;points&nbsp;/&nbsp;time^alpha&nbsp;</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 因此用户的投票会相应的把新闻挖出来，但时间会按照一定的指数将新闻埋下去。下面是我们的模式，当然算法由你决定。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
模式是这样的，开始时先观察那些可能是最新的项目，例如首页上的1000条新闻都是候选者，因此我们先忽视掉其他的，这实现起来很简单。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 每次新的新闻贴上来后，我们将ID添加到列表中，使用LPUSH + LTRIM，确保只取出最新的1000条项目。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
有一项后台任务获取这个列表，并且持续的计算这1000条新闻中每条新闻的最终得分。计算结果由ZADD命令按照新的顺序填充生成列表，老新闻则被清除。这里的关键思路是排序工作是由后台任务来完成的。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">5、处理过期项目</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 另一种常用的项目排序是按照时间排序。我们使用unix时间作为得分即可。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 模式如下：</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;- 
每次有新项目添加到我们的非Redis数据库时，我们把它加入到排序集合中。这时我们用的是时间属性，current_time和time_to_live。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;- 
另一项后台任务使用ZRANGE…SCORES查询排序集合，取出最新的10个项目。如果发现unix时间已经过期，则在数据库中删除条目。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">6、计数</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;Redis是一个很好的计数器，这要感谢INCRBY和其他相似命令。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
&nbsp;我相信你曾许多次想要给数据库加上新的计数器，用来获取统计或显示新信息，但是最后却由于写入敏感而不得不放弃它们。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;好了，现在使用Redis就不需要再担心了。有了原子递增（atomic 
increment），你可以放心的加上各种计数，用GETSET重置，或者是让它们过期。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;例如这样操作：</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
&nbsp;INCR&nbsp;user:&lt;id&gt;&nbsp;EXPIRE&nbsp;</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp;user:&lt;id&gt;&nbsp;60&nbsp;</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
&nbsp;你可以计算出最近用户在页面间停顿不超过60秒的页面浏览量，当计数达到比如20时，就可以显示出某些条幅提示，或是其它你想显示的东西。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">7、特定时间内的特定项目</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
另一项对于其他数据库很难，但Redis做起来却轻而易举的事就是统计在某段特点时间里有多少特定用户访问了某个特定资源。比如我想要知道某些特定的注册用户或IP地址，他们到底有多少访问了某篇文章。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 每次我获得一次新的页面浏览时我只需要这样做：</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
&nbsp;SADD&nbsp;page:day1:&lt;page_id&gt;&nbsp;&lt;user_id&gt;&nbsp;</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 当然你可能想用unix时间替换day1，比如time()-(time()%3600*24)等等。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 想知道特定用户的数量吗？只需要使用SCARD page:day1:&lt;page_id&gt;。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;需要测试某个特定用户是否访问了这个页面？SISMEMBER 
page:day1:&lt;page_id&gt;。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">8、实时分析正在发生的情况，用于数据统计与防止垃圾邮件等</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
我们只做了几个例子，但如果你研究Redis的命令集，并且组合一下，就能获得大量的实时分析方法，有效而且非常省力。使用Redis原语命令，更容易实施垃圾邮件过滤系统或其他实时跟踪系统。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">9、Pub/Sub</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp;Redis的Pub/Sub非常非常简单，运行稳定并且快速。支持模式匹配，能够实时订阅与取消频道。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">10、队列</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 你应该已经注意到像list push和list 
pop这样的Redis命令能够很方便的执行队列操作了，但能做的可不止这些：比如Redis还有list 
pop的变体命令，能够在列表为空时阻塞队列。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; 
&nbsp;现代的互联网应用大量地使用了消息队列（Messaging）。消息队列不仅被用于系统内部组件之间的通信，同时也被用于系统跟其它服务之间的交互。消息队列的使用可以增加系统的可扩展性、灵活性和用户体验。非基于消息队列的系统，其运行速度取决于系统中最慢的组件的速度（注：短板效应）。而基于消息队列可以将系统中各组件解除耦合，这样系统就不再受最慢组件的束缚，各组件可以异步运行从而得以更快的速度完成各自的工作。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; 此外，当服务器处在高并发操作的时候，比如频繁地写入日志文件。可以利用消息队列实现异步处理。从而实现高性能的并发操作。</SPAN></P>
<H3><SPAN 
style="font-family: arial, helvetica, sans-serif; font-size: 16px;">11、缓存</SPAN></H3>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;">&nbsp; 
&nbsp; &nbsp; &nbsp; 
Redis的缓存部分值得写一篇新文章，我这里只是简单的说一下。Redis能够替代memcached，让你的缓存从只能存储数据变得能够更新数据，因此你不再需要每次都重新生成数据了。</SPAN></P>
<P align="left"><SPAN style="font-family: arial, helvetica, sans-serif; font-size: 16px;"></SPAN>&nbsp;</P></DIV>
<DIV id="MySignature"></DIV>
<DIV class="clear"></DIV>
<DIV id="blog_post_info_block">
<DIV id="BlogPostCategory"></DIV>
<DIV id="EntryTag"></DIV>
<DIV id="blog_post_info"></DIV>
<DIV class="clear"></DIV>
<DIV id="post_next_prev"></DIV></DIV></DIV>
<DIV class="postDesc">posted @ <SPAN id="post-date">2018-06-01 17:34</SPAN> <A 
href="https://www.cnblogs.com/guanghe/">光何</A> 阅读(<SPAN 
id="post_view_count">...</SPAN>) 评论(<SPAN id="post_comment_count">...</SPAN>)  
<A href="https://i.cnblogs.com/EditPosts.aspx?postid=9122684" 
rel="nofollow">编辑</A> <A onclick="AddToWz(9122684);return false;" href="https://www.cnblogs.com/guanghe/p/9122684.html#">收藏</A></DIV></DIV>
<SCRIPT type="text/javascript">var allowComments=true,cb_blogId=284960,cb_entryId=9122684,cb_blogApp=currentBlogApp,cb_blogUserGuid='79c611b4-0d18-e611-9fc1-ac853d9f53cc',cb_entryCreatedDate='2018/6/1 17:34:00';loadViewCount(cb_entryId);var cb_postType=1;var isMarkdown=false;</SCRIPT>
</DIV><!--end: topics 文章、评论容器--></DIV><A name="!comments"></A>
<DIV id="blog-comments-placeholder"></DIV>
<SCRIPT type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</SCRIPT>

<DIV id="comment_form" class="commentform"><A name="commentform"></A>
<DIV id="divCommentShow"></DIV>
<DIV id="comment_nav"><SPAN id="span_refresh_tips"></SPAN><A id="lnk_RefreshComments" 
onclick="return RefreshCommentList();" href="javascript:void(0);" clientidmode="Static" 
runat="server">刷新评论</A><A onclick="return RefreshPage();" href="https://www.cnblogs.com/guanghe/p/9122684.html#">刷新页面</A><A 
href="https://www.cnblogs.com/guanghe/p/9122684.html#top">返回顶部</A></DIV>
<DIV id="comment_form_container"></DIV>
<DIV id="ad_text_under_commentbox" class="ad_text_commentbox"></DIV>
<DIV id="ad_t2"></DIV>
<DIV id="opt_under_post"></DIV>
<SCRIPT src="Redis之数据存储结构%20-%20光何%20-%20博客园_files/gpt.js" async="async"></SCRIPT>

<SCRIPT>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
</SCRIPT>

<SCRIPT>
  googletag.cmd.push(function() {
        googletag.defineSlot('/1090369/C1', [300, 250], 'div-gpt-ad-1546353474406-0').addService(googletag.pubads());
        googletag.defineSlot('/1090369/C2', [468, 60], 'div-gpt-ad-1539008685004-0').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
  });
</SCRIPT>

<DIV id="cnblogs_c1" class="c_ad_block">
<DIV style="width: 300px; height: 250px;" id="div-gpt-ad-1546353474406-0"></DIV>
</DIV>
<DIV id="under_post_news"></DIV>
<DIV id="cnblogs_c2" class="c_ad_block">
<DIV style="width: 468px; height: 60px;" id="div-gpt-ad-1539008685004-0"></DIV>
</DIV>
<DIV id="under_post_kb"></DIV>
<DIV id="HistoryToday" class="c_ad_block"></DIV>
<SCRIPT type="text/javascript">
 if(enablePostBottom()) {
    codeHighlight();
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverT2();
    deliverC1();
    deliverC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);  
}
</SCRIPT>
</DIV></DIV><!--end: forFlow --></DIV><!--end: mainContent 主体内容容器-->
<DIV id="sideBar">
<DIV id="sideBarMain"><!--done-->
<DIV class="newsItem">
<H3 class="catListTitle">公告</H3>
<DIV id="blog-news"></DIV>
<SCRIPT type="text/javascript">loadBlogNews();</SCRIPT>
</DIV>
<DIV id="calendar">
<DIV style="display: none;" id="blog-calendar"></DIV>
<SCRIPT type="text/javascript">loadBlogDefaultCalendar();</SCRIPT>
</DIV>
<DIV id="leftcontentcontainer">
<DIV id="blog-sidecolumn"></DIV>
<SCRIPT type="text/javascript">loadBlogSideColumn();</SCRIPT>
</DIV></DIV><!--end: sideBarMain --></DIV><!--end: sideBar 侧边栏容器 -->
<DIV class="clear"></DIV></DIV><!--end: main -->
<DIV class="clear"></DIV>
<DIV id="footer"><!--done-->Copyright ©2019 光何	</DIV><!--end: footer --></DIV><!--end: home 自定义的最大容器 --></BODY></HTML>
